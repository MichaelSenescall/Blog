{
  
    
        "post0": {
            "title": "Random Forest and Data Exploration",
            "content": "Load Kaggle API Key and Libraries . !pip install -Uqq ipywidgets #This is already included in fastai but ah well import ipywidgets as widgets from pathlib import Path def on_file_upload(change): cred_path = Path(&#39;~/.kaggle/kaggle.json&#39;).expanduser() if not cred_path.exists(): cred_path.parent.mkdir(exist_ok=True) cred_path.write_text(str(btn_upload.data[-1])[2:-1]) cred_path.chmod(0o600) btn_upload = widgets.FileUpload(accept=&#39;.json&#39;, multiple=False) btn_upload.observe(on_file_upload, names=&#39;data&#39;) display(widgets.Label(&#39;Upload &#39;kaggle.json &#39;&#39;), btn_upload) . !pip install -Uqq fastai !pip install -Uqq kaggle import pandas as pd import numpy as np from fastai.tabular.all import * from kaggle import api from sklearn.model_selection import train_test_split from sklearn.compose import ColumnTransformer from sklearn.pipeline import Pipeline from sklearn.impute import SimpleImputer from sklearn.preprocessing import OneHotEncoder from sklearn.ensemble import RandomForestClassifier from sklearn.metrics import roc_auc_score from sklearn.metrics import plot_roc_curve from sklearn.metrics import plot_confusion_matrix . |████████████████████████████████| 194kB 6.8MB/s |████████████████████████████████| 61kB 7.0MB/s . Load and Clean Data . api.competition_download_cli(&quot;homesite-quote-conversion&quot;) file_extract(&quot;homesite-quote-conversion.zip&quot;) #Extract all sub-directories and delete .zip files for item in os.listdir(): if item.endswith(&quot;.zip&quot;): file_extract(item) for item in os.listdir(): if item.endswith(&quot;.zip&quot;): os.remove(item) . 0%| | 0.00/62.0M [00:00&lt;?, ?B/s] . Downloading homesite-quote-conversion.zip to /content . 100%|██████████| 62.0M/62.0M [00:00&lt;00:00, 74.2MB/s] . . X_full = pd.read_csv(&quot;train.csv&quot;, parse_dates=[&#39;Original_Quote_Date&#39;]) X_test_full = pd.read_csv(&quot;test.csv&quot;, parse_dates=[&#39;Original_Quote_Date&#39;]) #Remove rows with missing target data (QuoteConversion_Flag) X_full.dropna(axis=0, subset=[&#39;QuoteConversion_Flag&#39;], inplace=True) #Format dates #This model actually performs better if dates are just dropped #but I&#39;ve included them just to demonstrate how this would be done X_full[&quot;Year&quot;] = X_full[&quot;Original_Quote_Date&quot;].dt.year X_full[&quot;Month&quot;] = X_full[&quot;Original_Quote_Date&quot;].dt.month X_full[&quot;Day&quot;] = X_full[&quot;Original_Quote_Date&quot;].dt.day X_test_full[&quot;Year&quot;] = X_test_full[&quot;Original_Quote_Date&quot;].dt.year X_test_full[&quot;Month&quot;] = X_test_full[&quot;Original_Quote_Date&quot;].dt.month X_test_full[&quot;Day&quot;] = X_test_full[&quot;Original_Quote_Date&quot;].dt.day X_full = X_full.drop(&quot;Original_Quote_Date&quot;, axis=1) X_test_full = X_test_full.drop(&quot;Original_Quote_Date&quot;, axis=1) #Seperate target column from the rest of the data (seperate X from Y) y = X_full.QuoteConversion_Flag X_full.drop([&#39;QuoteConversion_Flag&#39;], axis=1, inplace=True) #Split data for training X_train_full, X_valid_full, y_train, y_valid = train_test_split(X_full, y, train_size=0.8, test_size=0.2, random_state=42) #Select numrical columns numerical_cols = [col for col in X_train_full.columns if X_train_full[col].dtype in [&#39;int64&#39;, &#39;float64&#39;]] #Select categorical columns (must have cardinality &lt; 10) categorical_cols = [col for col in X_train_full.columns if X_train_full[col].dtype == &#39;object&#39; and X_train_full[col].nunique() &lt; 10] #Combine together to get all columns selected_cols = numerical_cols + categorical_cols X_train = X_train_full[selected_cols].copy() X_valid = X_valid_full[selected_cols].copy() X_test = X_test_full[selected_cols].copy() . numerical_transformer = SimpleImputer(strategy=&#39;mean&#39;) #Preprocessing for categorical data categorical_transformer = Pipeline(steps=[ (&#39;imputer&#39;, SimpleImputer(strategy=&#39;most_frequent&#39;)), (&#39;onehot&#39;, OneHotEncoder(handle_unknown=&#39;ignore&#39;)) ]) #Bundle preprocessing for numerical and categorical data preprocessor = ColumnTransformer( transformers=[ (&#39;num&#39;, numerical_transformer, numerical_cols), (&#39;cat&#39;, categorical_transformer, categorical_cols) ]) #Define model model = RandomForestClassifier(n_estimators=100, random_state=0) #Bundle preprocessing and modeling code in a pipeline clf = Pipeline(steps=[ (&#39;preprocessor&#39;, preprocessor), (&#39;model&#39;, model) ]) . Fit and Predict . clf.fit(X_train, y_train) #Preprocessing of validation data, get predictions preds = clf.predict(X_valid) . preds_final = clf.predict(X_test) #Format and output to csv file df_final = pd.DataFrame({ &quot;QuoteNumber&quot;: X_test.QuoteNumber, &quot;QuoteConversion_Flag&quot;: preds_final }) df_final.to_csv(&quot;submission.csv&quot;, index=False) . Visualisations . print(&quot;ROC AUC Score: &quot; + str(roc_auc_score(y_valid, preds))) . ROC AUC Score: 0.80549992883288 . plot_roc_curve(clf, X_valid, y_valid) . &lt;sklearn.metrics._plot.roc_curve.RocCurveDisplay at 0x7f9a14bcd9d0&gt; . plot_confusion_matrix(clf, X_valid, y_valid, values_format=&#39;d&#39;) . &lt;sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7f9a12017d10&gt; . from sklearn.feature_selection._base import SelectorMixin from sklearn.feature_extraction.text import _VectorizerMixin def get_feature_out(estimator, feature_in): if hasattr(estimator,&#39;get_feature_names&#39;): if isinstance(estimator, _VectorizerMixin): # handling all vectorizers return [f&#39;vec_{f}&#39; for f in estimator.get_feature_names()] else: return estimator.get_feature_names(feature_in) elif isinstance(estimator, SelectorMixin): return np.array(feature_in)[estimator.get_support()] else: return feature_in def get_feature_names(ct): &quot;&quot;&quot; handles all estimators, pipelines inside ColumnTransfomer doesn&#39;t work when remainder ==&#39;passthrough&#39; which requires the input column names. &quot;&quot;&quot; output_features = [] for name, estimator, features in ct.transformers_: if name!=&#39;remainder&#39;: if isinstance(estimator, Pipeline): current_features = features for step in estimator: current_features = get_feature_out(step, current_features) features_out = current_features else: features_out = get_feature_out(estimator, features) output_features.extend(features_out) elif estimator==&#39;passthrough&#39;: output_features.extend(ct._feature_names_in[features]) return output_features . #but a simple concat would probably also work... #np.concatenate((np.array(numerical_cols), # clf[0].transformers_[1][1][1].get_feature_names())) df_importance = pd.DataFrame({&#39;cols&#39;:get_feature_names(clf[0]), &#39;imp&#39;:clf.steps[1][1].feature_importances_}).sort_values(&#39;imp&#39;, ascending=False) . def plot_fi(fi): return fi.plot(&#39;cols&#39;, &#39;imp&#39;, &#39;barh&#39;, figsize=(12,7), legend=False) plot_fi(df_importance[:30]) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f9a117ce450&gt; . Unimportant features may be removed from the model to make the data more manageable .",
            "url": "https://michaelsenescall.github.io/Blog/jupyter/collab/2021/06/26/Random-Forest-and-Data-Exploration.html",
            "relUrl": "/jupyter/collab/2021/06/26/Random-Forest-and-Data-Exploration.html",
            "date": " • Jun 26, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://michaelsenescall.github.io/Blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://michaelsenescall.github.io/Blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://michaelsenescall.github.io/Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://michaelsenescall.github.io/Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}